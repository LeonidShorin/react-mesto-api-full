{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl\n    } = _ref;\n    this._url = baseUrl;\n  }\n\n  _parseResponse(res, errorText) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`${errorText}. Статус ошибки:${res.status}`);\n  }\n\n  getUserInfo(jwt) {\n    return fetch(this._url + '/users/me', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить данные пользователя');\n    });\n  }\n\n  getInitialCards(jwt) {\n    return fetch(this._url + '/cards', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить карточки');\n    });\n  }\n\n  editProfile(_ref2, jwt) {\n    let {\n      name,\n      description\n    } = _ref2;\n    return fetch(this._url + '/users/me', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        name: name,\n        about: description\n      })\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить данные профиля');\n    });\n  }\n\n  updateUserAvatar(link, jwt) {\n    return fetch(this._url + '/users/me/avatar', {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить аватар');\n    });\n  }\n\n  addCard(_ref3, jwt) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(this._url + '/cards', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось добавить карточку');\n    });\n  }\n\n  deleteCard(cardId, jwt) {\n    return fetch(this._url + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось удалить карточку');\n    });\n  }\n\n  addLike(cardId, jwt) {\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось поставить like');\n    });\n  }\n\n  removeLike(cardId, jwt) {\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось убрать лайк');\n    });\n  }\n\n} // Экземпляр класса Api\n\n\nexport const api = new Api({\n  baseUrl: 'http://api.mestobyleonid.nomoredomains.work'\n});","map":{"version":3,"sources":["C:/Users/stanv/dev/react-mesto-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","baseUrl","_url","_parseResponse","res","errorText","ok","json","Promise","reject","status","getUserInfo","jwt","fetch","method","headers","then","getInitialCards","editProfile","name","description","body","JSON","stringify","about","updateUserAvatar","link","avatar","addCard","deleteCard","cardId","addLike","removeLike","api"],"mappings":"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","sourcesContent":["class Api {\r\n  constructor({ baseUrl }) {\r\n    this._url = baseUrl;\r\n  }\r\n\r\n  _parseResponse(res, errorText) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`${errorText}. Статус ошибки:${res.status}`);\r\n  }\r\n\r\n  getUserInfo(jwt) {\r\n    return fetch(this._url + '/users/me', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      }})\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось загрузить данные пользователя');\r\n      });\r\n  }\r\n\r\n  getInitialCards(jwt) {\r\n    return fetch(this._url + '/cards', {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      }})\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось загрузить карточки');\r\n      });\r\n  }\r\n\r\n  editProfile({ name, description }, jwt) {\r\n    return fetch(this._url + '/users/me', {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: description\r\n      })\r\n    })\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось загрузить данные профиля');\r\n      });\r\n  }\r\n\r\n  updateUserAvatar(link, jwt) {\r\n    return fetch(this._url + '/users/me/avatar', {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify({\r\n        avatar: link\r\n      })\r\n    })\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось загрузить аватар');\r\n      });\r\n  }\r\n\r\n  addCard({ name, link }, jwt) {\r\n    return fetch(this._url + '/cards', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      },\r\n      body: JSON.stringify({\r\n        name: name,\r\n        link: link\r\n      })\r\n    })\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось добавить карточку');\r\n      });\r\n  }\r\n\r\n  deleteCard(cardId, jwt) {\r\n    return fetch(this._url + '/cards/' + cardId, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`},\r\n      })\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось удалить карточку');\r\n      });\r\n  }\r\n\r\n  addLike(cardId, jwt) {\r\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    })\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось поставить like');\r\n      });\r\n  }\r\n\r\n  removeLike(cardId, jwt) {\r\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${jwt}`\r\n      }\r\n    })\r\n      .then(res => {\r\n        return this._parseResponse(res, 'Не удалось убрать лайк');\r\n      });\r\n  }\r\n}\r\n\r\n// Экземпляр класса Api\r\nexport const api = new Api({\r\n  baseUrl: 'http://api.mestobyleonid.nomoredomains.work',\r\n});"]},"metadata":{},"sourceType":"module"}