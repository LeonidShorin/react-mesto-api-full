{"ast":null,"code":"/*** Класс Api для сетевых запросов ***/\nclass Api {\n  constructor(_ref) {\n    let {\n      baseURL,\n      headers\n    } = _ref;\n    this._URL = baseURL;\n    this._headers = headers;\n  }\n\n  _parseResponse(res, errorText) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`${errorText}. Статус ошибки: ${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(this._URL + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось загрузить данные пользователя');\n    });\n  }\n\n  getInitialCards() {\n    return fetch(this._URL + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось загрузить карточки');\n    });\n  }\n\n  editProfile(_ref2) {\n    let {\n      name,\n      description\n    } = _ref2;\n    return fetch(this._URL + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: description\n      })\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось обновить профиль пользователя');\n    });\n  }\n\n  updateUserAvatar(avatarLink) {\n    return fetch(this._URL + '/users/me/avatar', {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось обновить аватар пользователя');\n    });\n  }\n\n  addCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(this._URL + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось добавить карточку');\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(this._URL + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось удалить карточку');\n    });\n  }\n\n  addLike(cardId) {\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось поставить лайк карточке');\n    });\n  }\n\n  removeLike(cardId) {\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось удалить лайк карточки');\n    });\n  }\n\n} //Экземпляр класса Api для сетевых запросов\n\n\nexport const api = new Api({\n  baseURL: 'https://mesto.nomoreparties.co/v1/cohort-31',\n  headers: {\n    authorization: '65021073-788a-4fae-b274-a844bf3e53d6',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["C:/Users/Leonid/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","baseURL","headers","_URL","_headers","_parseResponse","res","errorText","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","_handleError","getInitialCards","editProfile","name","description","body","JSON","stringify","about","updateUserAvatar","avatarLink","avatar","addCard","link","deleteCard","cardId","addLike","removeLike","api","authorization"],"mappings":"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","sourcesContent":["/*** Класс Api для сетевых запросов ***/\r\n\r\nclass Api {\r\n  constructor({baseURL, headers}) {\r\n    this._URL = baseURL;\r\n    this._headers = headers;\r\n  }\r\n\r\n  _parseResponse(res, errorText) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`${errorText}. Статус ошибки: ${res.status}`);\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(this._URL + '/users/me', {\r\n      method: 'GET', headers: this._headers,\r\n    })\r\n      .then((res) => {\r\n        return this._handleError(res, 'Ошибка, не удалось загрузить данные пользователя');\r\n      });\r\n  }\r\n\r\n\r\n  getInitialCards() {\r\n    return fetch(this._URL + '/cards', {\r\n      method: 'GET', headers: this._headers,\r\n    })\r\n      .then(res => {\r\n        return this._handleError(res, 'Ошибка, не удалось загрузить карточки')\r\n      });\r\n  }\r\n\r\n  editProfile({name, description}) {\r\n    return fetch(this._URL + '/users/me', {\r\n      method: 'PATCH', headers: this._headers, body: JSON.stringify({\r\n        name: name, about: description\r\n      })\r\n    })\r\n      .then(res => {\r\n        return this._handleError(res, 'Ошибка, не удалось обновить профиль пользователя')\r\n      });\r\n  }\r\n\r\n  updateUserAvatar(avatarLink) {\r\n    return fetch(this._URL + '/users/me/avatar', {\r\n      method: \"PATCH\", headers: this._headers, body: JSON.stringify({\r\n        avatar: avatarLink\r\n      })\r\n    })\r\n      .then(res => {\r\n        return this._handleError(res, 'Ошибка, не удалось обновить аватар пользователя')\r\n      });\r\n  }\r\n\r\n  addCard({name, link}) {\r\n    return fetch(this._URL + '/cards', {\r\n      method: 'POST', headers: this._headers, body: JSON.stringify({\r\n        name: name, link: link\r\n      })\r\n    })\r\n      .then(res => {\r\n        return this._handleError(res, 'Ошибка, не удалось добавить карточку')\r\n      });\r\n  }\r\n\r\n  deleteCard(cardId) {\r\n    return fetch(this._URL + '/cards/' + cardId, {\r\n      method: 'DELETE', headers: this._headers,\r\n    })\r\n      .then(res => {\r\n        return this._handleError(res, 'Ошибка, не удалось удалить карточку')\r\n      });\r\n  }\r\n\r\n  addLike(cardId) {\r\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\r\n      method: 'PUT', headers: this._headers,\r\n    })\r\n      .then(res => {\r\n        return this._handleError(res, 'Ошибка, не удалось поставить лайк карточке')\r\n      });\r\n  }\r\n\r\n  removeLike(cardId) {\r\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\r\n      method: 'DELETE', headers: this._headers,\r\n    })\r\n      .then(res => {\r\n        return this._handleError(res, 'Ошибка, не удалось удалить лайк карточки')\r\n      });\r\n  }\r\n}\r\n//Экземпляр класса Api для сетевых запросов\r\nexport const api = new Api({\r\n  baseURL: 'https://mesto.nomoreparties.co/v1/cohort-31',\r\n  headers: {\r\n    authorization: '65021073-788a-4fae-b274-a844bf3e53d6',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}