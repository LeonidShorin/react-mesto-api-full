{"ast":null,"code":"/*** Класс Api для сетевых запросов ***/\nclass Api {\n  constructor(_ref) {\n    let {\n      baseURL\n    } = _ref;\n    this._URL = baseURL;\n  }\n\n  _handleError(res, errorText) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`${errorText}. Статус ошибки: ${res.status}`);\n  }\n\n  getUserInfo(jwt) {\n    return fetch(this._URL + '/users/me', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось загрузить данные пользователя');\n    });\n  }\n\n  getInitialCards(jwt) {\n    return fetch(this._URL + '/cards', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось загрузить карточки');\n    });\n  }\n\n  editProfile(_ref2, jwt) {\n    let {\n      name,\n      description\n    } = _ref2;\n    return fetch(this._URL + '/users/me', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        name: name,\n        about: description\n      })\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось обновить профиль пользователя');\n    });\n  }\n\n  updateUserAvatar(avatarLink, jwt) {\n    return fetch(this._URL + '/users/me/avatar', {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось обновить аватар пользователя');\n    });\n  }\n\n  addNewCard(_ref3, jwt) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(this._URL + '/cards', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось добавить карточку');\n    });\n  }\n\n  deleteCard(cardId, jwt) {\n    return fetch(this._URL + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось удалить карточку');\n    });\n  }\n\n  likeCard(cardId, jwt) {\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось поставить лайк карточке');\n    });\n  }\n\n  dislikeCard(cardId, jwt) {\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    }).then(res => {\n      return this._handleError(res, 'Ошибка, не удалось удалить лайк карточки');\n    });\n  }\n\n} //Экземпляр класса Api для сетевых запросов\n\n\nexport const api = new Api({\n  baseURL: 'https://api.mestobyleonid.nomoredomains.work'\n});","map":{"version":3,"sources":["C:/Users/stanv/dev/react-mesto-api-full/frontend/src/utils/api.js"],"names":["Api","constructor","baseURL","_URL","_handleError","res","errorText","ok","json","Promise","reject","status","getUserInfo","jwt","fetch","method","headers","then","getInitialCards","editProfile","name","description","body","JSON","stringify","about","updateUserAvatar","avatarLink","avatar","addNewCard","link","deleteCard","cardId","likeCard","dislikeCard","api"],"mappings":"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","sourcesContent":["/*** Класс Api для сетевых запросов ***/\n\nclass Api {\n  constructor({baseURL}) {\n    this._URL = baseURL;\n  }\n\n  _handleError(res, errorText) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`${errorText}. Статус ошибки: ${res.status}`);\n  }\n\n  getUserInfo(jwt) {\n    return fetch(this._URL + '/users/me', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n    }})\n      .then((res) => {\n        return this._handleError(res, 'Ошибка, не удалось загрузить данные пользователя');\n      });\n  }\n\n\n  getInitialCards(jwt) {\n    return fetch(this._URL + '/cards', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`}\n    })\n      .then(res => {\n        return this._handleError(res, 'Ошибка, не удалось загрузить карточки')\n      });\n  }\n\n  editProfile({name, description}, jwt) {\n    return fetch(this._URL + '/users/me', {\n      method: 'PATCH',\n      headers: {'Content-Type': 'application/json',\n                'Authorization': `Bearer ${jwt}`},\n      body: JSON.stringify({\n        name: name, about: description\n      })\n    })\n      .then(res => {\n        return this._handleError(res, 'Ошибка, не удалось обновить профиль пользователя')\n      });\n  }\n\n  updateUserAvatar(avatarLink, jwt) {\n    return fetch(this._URL + '/users/me/avatar', {\n      method: \"PATCH\",\n      headers: {'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`},\n      body: JSON.stringify({\n        avatar: avatarLink\n      })\n    })\n      .then(res => {\n        return this._handleError(res, 'Ошибка, не удалось обновить аватар пользователя')\n      });\n  }\n\n  addNewCard({name, link}, jwt) {\n    return fetch(this._URL + '/cards', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n      body: JSON.stringify({\n        name: name, link: link\n      })\n    })\n      .then(res => {\n        return this._handleError(res, 'Ошибка, не удалось добавить карточку')\n      });\n  }\n\n  deleteCard(cardId, jwt) {\n    return fetch(this._URL + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: {'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`},\n    })\n      .then(res => {\n        return this._handleError(res, 'Ошибка, не удалось удалить карточку')\n      });\n  }\n\n  likeCard(cardId, jwt) {\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      },\n    })\n      .then(res => {\n        return this._handleError(res, 'Ошибка, не удалось поставить лайк карточке')\n      });\n  }\n\n  dislikeCard(cardId, jwt) {\n    return fetch(this._URL + '/cards/' + cardId + '/likes/', {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${jwt}`\n      }\n    })\n      .then(res => {\n        return this._handleError(res, 'Ошибка, не удалось удалить лайк карточки')\n      });\n  }\n}\n//Экземпляр класса Api для сетевых запросов\nexport const api = new Api({\n  baseURL: 'https://api.mestobyleonid.nomoredomains.work',\n});\n"]},"metadata":{},"sourceType":"module"}