{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      serverUrl,\n      headers\n    } = _ref;\n    this._url = serverUrl;\n    this._headers = headers;\n  }\n\n  _parseResponse(res, errorText) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`${errorText}. Статус ошибки:${res.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(this._url + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить данные пользователя');\n    });\n  }\n\n  getInitialCards() {\n    return fetch(this._url + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить карточки');\n    });\n  }\n\n  editProfile(_ref2) {\n    let {\n      name,\n      description\n    } = _ref2;\n    return fetch(this._url + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: description\n      })\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить данные профиля');\n    });\n  }\n\n  updateAvatar(link) {\n    return fetch(this._url + '/users/me/avatar', {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось загрузить аватар');\n    });\n  }\n\n  addCard(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return fetch(this._url + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось добавить карточку');\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(this._url + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось удалить карточку');\n    });\n  }\n\n  addLike(cardId) {\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось поставить like');\n    });\n  }\n\n  removeLike(cardId) {\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => {\n      return this._parseResponse(res, 'Не удалось убрать лайк');\n    });\n  }\n\n} // Экземпляр класса Api\n\n\nconst api = new Api({\n  serverUrl: 'https://mesto.nomoreparties.co/v1/cohort-31',\n  headers: {\n    authorization: 'c5326610-ed33-45d9-9066-edfd682961dc',\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"sources":["C:/Users/Leonid/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","serverUrl","headers","_url","_headers","_parseResponse","res","errorText","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","getInitialCards","editProfile","name","description","body","JSON","stringify","about","updateAvatar","link","avatar","addCard","deleteCard","cardId","addLike","removeLike","api","authorization"],"mappings":"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","sourcesContent":["class Api {\r\n  constructor({serverUrl, headers}) {\r\n    this._url = serverUrl;\r\n    this._headers = headers;\r\n  }\r\n\r\n  _parseResponse(res, errorText) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n    return Promise.reject(`${errorText}. Статус ошибки:${res.status}`);\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(this._url + '/users/me',{\r\n      method: 'GET',\r\n      headers: this._headers,\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось загрузить данные пользователя');\r\n    });\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(this._url + '/cards', {\r\n      method: 'GET',\r\n      headers: this._headers,\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось загрузить карточки');\r\n    });\r\n  }\r\n\r\n  editProfile({name, description}) {\r\n    return fetch(this._url + '/users/me', {\r\n      method: 'PATCH',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: description\r\n      })\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось загрузить данные профиля');\r\n    });\r\n  }\r\n\r\n  updateAvatar(link) {\r\n    return fetch(this._url + '/users/me/avatar', {\r\n      method: \"PATCH\",\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        avatar: link\r\n      })\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось загрузить аватар');\r\n    });\r\n  }\r\n\r\n  addCard({name, link}) {\r\n    return fetch(this._url + '/cards', {\r\n      method: 'POST',\r\n      headers: this._headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        link: link\r\n      })\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось добавить карточку');\r\n    });\r\n  }\r\n\r\n  deleteCard(cardId) {\r\n    return fetch(this._url + '/cards/' + cardId, {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось удалить карточку');\r\n    });\r\n  }\r\n\r\n  addLike(cardId) {\r\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\r\n      method: 'PUT',\r\n      headers: this._headers,\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось поставить like');\r\n    });\r\n  }\r\n\r\n  removeLike(cardId) {\r\n    return fetch(this._url + '/cards/' + cardId + '/likes/', {\r\n      method: 'DELETE',\r\n      headers: this._headers,\r\n    })\r\n    .then(res => {return this._parseResponse(res, 'Не удалось убрать лайк');\r\n    });\r\n  }\r\n}\r\n\r\n// Экземпляр класса Api\r\nconst api = new Api ({\r\n  serverUrl: 'https://mesto.nomoreparties.co/v1/cohort-31',\r\n  headers: {\r\n    authorization: 'c5326610-ed33-45d9-9066-edfd682961dc',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}