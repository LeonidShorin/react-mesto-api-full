{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction useInput(initialValues) {\n  _s();\n\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const isDirtyInput = Object.values(initialValues).every(value => {\n    return value === '';\n  });\n  const [isValid, setIsValid] = useState(isDirtyInput);\n\n  function handleChange(e) {\n    const input = e.target;\n    handleError(input);\n    setValues(prev => ({ ...prev,\n      [e.target.name]: e.target.value\n    }));\n  }\n\n  function handleError(input) {\n    setErrors(prev => ({ ...prev,\n      [input.name]: input.validationMessage\n    }));\n  }\n\n  const resetForm = useCallback(() => {\n    setErrors(prev => {\n      return Object.fromEntries(Object.keys(prev).map(key => {\n        return [key, ''];\n      }));\n    });\n    setValues(initialValues);\n  }, [initialValues]);\n  useEffect(() => {\n    const areErrorsEmpty = Object.values(errors).every(error => {\n      return error === '';\n    }) || errors === {};\n    const isAnyInputClear = Object.values(values).some(value => {\n      return value === '';\n    }) || values === {};\n\n    if (areErrorsEmpty && !isAnyInputClear) {\n      setIsValid(true);\n    } else {\n      setIsValid(false);\n    }\n  }, [values, errors]);\n  return {\n    values,\n    handleChange,\n    handleError,\n    errors,\n    resetForm,\n    isValid,\n    setValues,\n    setErrors\n  };\n}\n\n_s(useInput, \"v9hfygXCHNcO2f3i/B0Gk1zqHY8=\");\n\nexport default useInput;","map":{"version":3,"sources":["C:/Users/Leonid/dev/react-mesto-auth/src/utils/formValidator.js"],"names":["useInput","initialValues","values","setValues","useState","errors","setErrors","isDirtyInput","Object","every","value","isValid","setIsValid","handleChange","e","input","target","handleError","prev","name","validationMessage","resetForm","useCallback","fromEntries","keys","map","key","useEffect","areErrorsEmpty","error","isAnyInputClear","some"],"mappings":";;AAAA,SAASA,QAAT,CAAkBC,aAAlB,EAAiC;AAAA;;AAC/B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAACH,aAAD,CAApC;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBF,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMG,YAAY,GAAGC,MAAM,CAACN,MAAP,CAAcD,aAAd,EAA6BQ,KAA7B,CAAmCC,KAAK,IAAG;AAAC,WAAOA,KAAK,KAAK,EAAjB;AAAoB,GAAhE,CAArB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAACG,YAAD,CAAtC;;AAEA,WAASM,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAhB;AACCC,IAAAA,WAAW,CAACF,KAAD,CAAX;AACAZ,IAAAA,SAAS,CAAEe,IAAD,KAAS,EAAC,GAAGA,IAAJ;AAAU,OAACJ,CAAC,CAACE,MAAF,CAASG,IAAV,GAAiBL,CAAC,CAACE,MAAF,CAASN;AAApC,KAAT,CAAD,CAAT;AACF;;AAGD,WAASO,WAAT,CAAqBF,KAArB,EAA4B;AAC1BT,IAAAA,SAAS,CAAEY,IAAD,KAAS,EAAC,GAAGA,IAAJ;AAAU,OAACH,KAAK,CAACI,IAAP,GAAcJ,KAAK,CAACK;AAA9B,KAAT,CAAD,CAAT;AACD;;AAED,QAAMC,SAAS,GAAGC,WAAW,CAAC,MAAM;AAClChB,IAAAA,SAAS,CAAEY,IAAD,IAAQ;AAChB,aAAOV,MAAM,CAACe,WAAP,CAAmBf,MAAM,CAACgB,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,CAAuBC,GAAD,IAAO;AACrD,eAAO,CAACA,GAAD,EAAM,EAAN,CAAP;AACD,OAFyB,CAAnB,CAAP;AAGD,KAJQ,CAAT;AAKAvB,IAAAA,SAAS,CAACF,aAAD,CAAT;AACD,GAP4B,EAO3B,CAACA,aAAD,CAP2B,CAA7B;AASA0B,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAMC,cAAc,GAAGpB,MAAM,CAACN,MAAP,CAAcG,MAAd,EAAsBI,KAAtB,CAA4BoB,KAAK,IAAE;AACxD,aAAOA,KAAK,KAAK,EAAjB;AACD,KAFsB,KAEjBxB,MAAM,KAAK,EAFjB;AAGA,UAAMyB,eAAe,GAAGtB,MAAM,CAACN,MAAP,CAAcA,MAAd,EAAsB6B,IAAtB,CAA2BrB,KAAK,IAAE;AACxD,aAAOA,KAAK,KAAK,EAAjB;AACD,KAFuB,KAElBR,MAAM,KAAK,EAFjB;;AAGA,QAAI0B,cAAc,IAAI,CAACE,eAAvB,EAAwC;AACtClB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAFD,MAEO;AACNA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACF,GAZQ,EAYN,CAACV,MAAD,EAASG,MAAT,CAZM,CAAT;AAgBA,SAAO;AACLH,IAAAA,MADK;AAELW,IAAAA,YAFK;AAGLI,IAAAA,WAHK;AAILZ,IAAAA,MAJK;AAKLgB,IAAAA,SALK;AAMLV,IAAAA,OANK;AAOLR,IAAAA,SAPK;AAQLG,IAAAA;AARK,GAAP;AAaD;;GAvDQN,Q;;AAyDT,eAAeA,QAAf","sourcesContent":["function useInput(initialValues) {\r\n  const [values, setValues] = useState(initialValues);\r\n  const [errors, setErrors] = useState({});\r\n  const isDirtyInput = Object.values(initialValues).every(value=> {return value === ''});\r\n  const [isValid, setIsValid] = useState(isDirtyInput);\r\n\r\n  function handleChange(e) {\r\n    const input = e.target;\r\n     handleError(input);\r\n     setValues((prev)=>({...prev, [e.target.name]: e.target.value}));\r\n  }\r\n\r\n\r\n  function handleError(input) {\r\n    setErrors((prev)=>({...prev, [input.name]: input.validationMessage}));\r\n  }\r\n\r\n  const resetForm = useCallback(() => {\r\n    setErrors((prev)=>{\r\n      return Object.fromEntries(Object.keys(prev).map((key)=>{\r\n        return [key, '']\r\n      }))\r\n    });\r\n    setValues(initialValues);\r\n  },[initialValues])\r\n\r\n  useEffect(()=>{\r\n    const areErrorsEmpty = Object.values(errors).every(error=>{\r\n      return error === ''\r\n    }) || errors === {};\r\n    const isAnyInputClear = Object.values(values).some(value=>{\r\n      return value === '';\r\n    }) || values === {};\r\n    if (areErrorsEmpty && !isAnyInputClear) {\r\n      setIsValid(true);\r\n    } else {\r\n     setIsValid(false)\r\n    }\r\n  }, [values, errors])\r\n\r\n\r\n\r\n  return {\r\n    values,\r\n    handleChange,\r\n    handleError,\r\n    errors,\r\n    resetForm,\r\n    isValid,\r\n    setValues,\r\n    setErrors\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\nexport default useInput"]},"metadata":{},"sourceType":"module"}