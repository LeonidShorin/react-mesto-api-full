{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\n\nfunction useForm(initialValues) {\n  _s();\n\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const isDirtyInput = Object.values(initialValues).every(value => {\n    return value === '';\n  });\n  const [isValid, setIsValid] = useState(isDirtyInput);\n\n  function handleChange(e) {\n    const input = e.target;\n    handleError(input);\n    setValues(prev => ({ ...prev,\n      [e.target.name]: e.target.value\n    }));\n  }\n\n  function handleError(input) {\n    setErrors(prev => ({ ...prev,\n      [input.name]: input.validationMessage\n    }));\n  }\n\n  const resetForm = useCallback(() => {\n    setErrors(prev => {\n      return Object.fromEntries(Object.keys(prev).map(key => {\n        return [key, ''];\n      }));\n    });\n    setValues(initialValues);\n  }, [initialValues]);\n  useEffect(() => {\n    const areErrorsEmpty = Object.values(errors).every(error => {\n      return error === '';\n    }) || errors === {};\n    const isAnyInputClear = Object.values(values).some(value => {\n      return value === '';\n    }) || values === {};\n\n    if (areErrorsEmpty && !isAnyInputClear) {\n      setIsValid(true);\n    } else {\n      setIsValid(false);\n    }\n  }, [values, errors]);\n  return {\n    values,\n    handleChange,\n    handleError,\n    errors,\n    resetForm,\n    isValid,\n    setValues,\n    setErrors\n  };\n}\n\n_s(useForm, \"v9hfygXCHNcO2f3i/B0Gk1zqHY8=\");\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/stanv/dev/react-mesto-api-full/frontend/src/utils/useForm.js"],"names":["useCallback","useEffect","useState","useForm","initialValues","values","setValues","errors","setErrors","isDirtyInput","Object","every","value","isValid","setIsValid","handleChange","e","input","target","handleError","prev","name","validationMessage","resetForm","fromEntries","keys","map","key","areErrorsEmpty","error","isAnyInputClear","some"],"mappings":";;AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;;AAEA,SAASC,OAAT,CAAiBC,aAAjB,EAAgC;AAAA;;AAC9B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAACE,aAAD,CAApC;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMO,YAAY,GAAGC,MAAM,CAACL,MAAP,CAAcD,aAAd,EAA6BO,KAA7B,CAAmCC,KAAK,IAAG;AAAC,WAAOA,KAAK,KAAK,EAAjB;AAAoB,GAAhE,CAArB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAACO,YAAD,CAAtC;;AAEA,WAASM,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAhB;AACCC,IAAAA,WAAW,CAACF,KAAD,CAAX;AACAX,IAAAA,SAAS,CAAEc,IAAD,KAAS,EAAC,GAAGA,IAAJ;AAAU,OAACJ,CAAC,CAACE,MAAF,CAASG,IAAV,GAAiBL,CAAC,CAACE,MAAF,CAASN;AAApC,KAAT,CAAD,CAAT;AACF;;AAGD,WAASO,WAAT,CAAqBF,KAArB,EAA4B;AAC1BT,IAAAA,SAAS,CAAEY,IAAD,KAAS,EAAC,GAAGA,IAAJ;AAAU,OAACH,KAAK,CAACI,IAAP,GAAcJ,KAAK,CAACK;AAA9B,KAAT,CAAD,CAAT;AACD;;AAED,QAAMC,SAAS,GAAGvB,WAAW,CAAC,MAAM;AAClCQ,IAAAA,SAAS,CAAEY,IAAD,IAAQ;AAChB,aAAOV,MAAM,CAACc,WAAP,CAAmBd,MAAM,CAACe,IAAP,CAAYL,IAAZ,EAAkBM,GAAlB,CAAuBC,GAAD,IAAO;AACrD,eAAO,CAACA,GAAD,EAAM,EAAN,CAAP;AACD,OAFyB,CAAnB,CAAP;AAGD,KAJQ,CAAT;AAKArB,IAAAA,SAAS,CAACF,aAAD,CAAT;AACD,GAP4B,EAO3B,CAACA,aAAD,CAP2B,CAA7B;AASAH,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAM2B,cAAc,GAAGlB,MAAM,CAACL,MAAP,CAAcE,MAAd,EAAsBI,KAAtB,CAA4BkB,KAAK,IAAE;AACxD,aAAOA,KAAK,KAAK,EAAjB;AACD,KAFsB,KAEjBtB,MAAM,KAAK,EAFjB;AAGA,UAAMuB,eAAe,GAAGpB,MAAM,CAACL,MAAP,CAAcA,MAAd,EAAsB0B,IAAtB,CAA2BnB,KAAK,IAAE;AACxD,aAAOA,KAAK,KAAK,EAAjB;AACD,KAFuB,KAElBP,MAAM,KAAK,EAFjB;;AAGA,QAAIuB,cAAc,IAAI,CAACE,eAAvB,EAAwC;AACtChB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAFD,MAEO;AACNA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA;AACF,GAZQ,EAYN,CAACT,MAAD,EAASE,MAAT,CAZM,CAAT;AAgBA,SAAO;AACLF,IAAAA,MADK;AAELU,IAAAA,YAFK;AAGLI,IAAAA,WAHK;AAILZ,IAAAA,MAJK;AAKLgB,IAAAA,SALK;AAMLV,IAAAA,OANK;AAOLP,IAAAA,SAPK;AAQLE,IAAAA;AARK,GAAP;AAaD;;GAvDQL,O;;AAyDT,eAAeA,OAAf","sourcesContent":["import {useCallback, useEffect, useState} from 'react';\n\nfunction useForm(initialValues) {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n  const isDirtyInput = Object.values(initialValues).every(value=> {return value === ''});\n  const [isValid, setIsValid] = useState(isDirtyInput);\n\n  function handleChange(e) {\n    const input = e.target;\n     handleError(input);\n     setValues((prev)=>({...prev, [e.target.name]: e.target.value}));\n  }\n\n\n  function handleError(input) {\n    setErrors((prev)=>({...prev, [input.name]: input.validationMessage}));\n  }\n\n  const resetForm = useCallback(() => {\n    setErrors((prev)=>{\n      return Object.fromEntries(Object.keys(prev).map((key)=>{\n        return [key, '']\n      }))\n    });\n    setValues(initialValues);\n  },[initialValues])\n\n  useEffect(()=>{\n    const areErrorsEmpty = Object.values(errors).every(error=>{\n      return error === ''\n    }) || errors === {};\n    const isAnyInputClear = Object.values(values).some(value=>{\n      return value === '';\n    }) || values === {};\n    if (areErrorsEmpty && !isAnyInputClear) {\n      setIsValid(true);\n    } else {\n     setIsValid(false)\n    }\n  }, [values, errors])\n\n\n\n  return {\n    values,\n    handleChange,\n    handleError,\n    errors,\n    resetForm,\n    isValid,\n    setValues,\n    setErrors\n  }\n\n\n\n}\n\nexport default useForm"]},"metadata":{},"sourceType":"module"}